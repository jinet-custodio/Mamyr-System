CREATE DATABASE mamyr;
USE mamyr;

-- =========================
-- USER-RELATED TABLES
-- =========================
CREATE TABLE userTypes (
    userTypeID INT PRIMARY KEY AUTO_INCREMENT,
    typeName VARCHAR(50) UNIQUE -- 'Customer', 'Partner', 'Admin'
);

CREATE TABLE userStatuses (
    userStatusID INT PRIMARY KEY AUTO_INCREMENT,
    statusName VARCHAR(50) UNIQUE -- 'Pending', 'Verified', 'Non-verified'
);

CREATE TABLE serviceAvailability (
    availabilityID INT PRIMARY KEY AUTO_INCREMENT,
    availabilityName VARCHAR(50) UNIQUE -- 'Available', 'Occupied', 'Maintenance'
);

CREATE TABLE users (
    userID INT PRIMARY KEY AUTO_INCREMENT,
    firstName VARCHAR(50) NOT NULL,
    middleInitial VARCHAR(50),
    lastName VARCHAR(50) NOT NULL,
    email VARCHAR(50) NOT NULL UNIQUE,
    userAddress TEXT NOT NULL,
    phoneNumber VARCHAR(20),
    birthDate DATE,
    password VARCHAR(255) NOT NULL,
    userProfile LONGBLOB,
    userTypeID INT NOT NULL DEFAULT 1,
    userOTP VARCHAR(100),
    OTP_expiration_at DATETIME,
    userStatusID INT NOT NULL DEFAULT 1,

    FOREIGN KEY (userTypeID) REFERENCES userTypes(userTypeID),
    FOREIGN KEY (userStatusID) REFERENCES userStatuses(userStatusID)
);

CREATE TABLE admins (
    adminID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL UNIQUE,
    position VARCHAR(100),

    FOREIGN KEY (userID) REFERENCES users(userID)
);

-- =========================
-- PARTNERSHIPS
-- =========================

CREATE TABLE partnerships (
    partnershipID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    partnerAddress TEXT NOT NULL,
    partnerType VARCHAR(200) NOT NULL,
    status ENUM('Pending', 'Approved', 'Rejected') NOT NULL DEFAULT 'Pending',
    startDate DATE NOT NULL,
    endDate DATE,

    FOREIGN KEY (userID) REFERENCES users(userID)
);

CREATE TABLE partnershipServices (
    partnershipBusinessID INT PRIMARY KEY AUTO_INCREMENT,
    partnershipID INT NOT NULL,
    PBName VARCHAR(200) NOT NULL,
    PBPrice DECIMAL(10,2) NOT NULL,
    PBDescription TEXT,
    PBcapacity INT,
    status ENUM('Pending', 'Approved', 'Denied') NOT NULL DEFAULT 'Pending',

    FOREIGN KEY (partnershipID) REFERENCES partnerships(partnershipID)
);

-- =========================
-- RESORT SERVICES
-- =========================

CREATE TABLE resortServices (
    resortServiceID INT PRIMARY KEY AUTO_INCREMENT,
    facilityName VARCHAR(200) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    capacity INT DEFAULT 0,
    duration VARCHAR(50) DEFAULT '0',
    description TEXT NULL,
    imageData LONGBLOB,
    category ENUM('Room','Cottage','Entertainment') NOT NULL
);

-- =========================
-- SERVICES (joins resort services with partner businesses)
-- =========================

CREATE TABLE services (
    serviceID INT PRIMARY KEY AUTO_INCREMENT,
    resortServiceID INT NOT NULL,
    partnershipBusinessID INT NOT NULL,
    availabilityID INT DEFAULT 1, 
    FOREIGN KEY (resortServiceID) REFERENCES resortServices(resortServiceID),
    FOREIGN KEY (partnershipBusinessID) REFERENCES partnershipBusinesses(partnershipBusinessID),
    FOREIGN KEY (availabilityID) REFERENCES serviceAvailability(availabilityID)
);

-- =========================
-- PACKAGES
-- =========================

CREATE TABLE packages (
    packageID INT PRIMARY KEY AUTO_INCREMENT,
    packageName VARCHAR(100) NOT NULL,
    price DECIMAL(10,2) DEFAULT 0.00
);

CREATE TABLE customPackages (
    customPackageID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    totalPrice DECIMAL(10,2) DEFAULT 0.00,
    creationDate DATE NOT NULL,

    FOREIGN KEY (userID) REFERENCES users(userID)
);

CREATE TABLE packagesServices (
    packageServiceID INT PRIMARY KEY AUTO_INCREMENT,
    customPackageID INT,
    packageID INT,
    serviceID INT NOT NULL,

    FOREIGN KEY (customPackageID) REFERENCES customPackages(customPackageID),
    FOREIGN KEY (packageID) REFERENCES packages(packageID),
    FOREIGN KEY (serviceID) REFERENCES services(serviceID)
);

-- =========================
-- BOOKINGS
-- =========================

CREATE TABLE bookings (
    bookingID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    packageID INT,
    serviceID INT,
    customPackageID INT,
    additionalRequest VARCHAR(255),
    startDate DATE NOT NULL,
    endDate DATE NOT NULL,
    totalCost DECIMAL(10,2) NOT NULL,
    status ENUM('Pending', 'Approved', 'Cancelled') NOT NULL DEFAULT 'Pending',
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (userID) REFERENCES users(userID),
    FOREIGN KEY (packageID) REFERENCES packages(packageID),
    FOREIGN KEY (serviceID) REFERENCES services(serviceID),
    FOREIGN KEY (customPackageID) REFERENCES customPackages(customPackageID)
);

CREATE TABLE confirmedBookings (
    confirmedBookingID INT PRIMARY KEY AUTO_INCREMENT,
    bookingID INT NOT NULL,
    totalCost DECIMAL(10,2) NOT NULL,
    status ENUM('Pending', 'Approved', 'Rejected') NOT NULL DEFAULT 'Pending',

    FOREIGN KEY (bookingID) REFERENCES bookings(bookingID)
);

-- =========================
-- WEBSITE CONTENT
-- =========================

CREATE TABLE websiteContents (
    contentID INT PRIMARY KEY AUTO_INCREMENT,
    adminID INT NOT NULL,
    sectionName VARCHAR(100) NOT NULL,
    title VARCHAR(255),
    content TEXT NOT NULL,
    lastUpdated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (adminID) REFERENCES admins(adminID)
);

-- âœ… Website Content Images (Weak Entity)
CREATE TABLE websiteContentImages (
    imageID INT PRIMARY KEY AUTO_INCREMENT,
    contentID INT NOT NULL,
    imageData LONGBLOB NOT NULL,
    altText VARCHAR(255),
    imageOrder INT DEFAULT 1,
    uploadedAt DATETIME DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (contentID) REFERENCES websiteContents(contentID)
        ON DELETE CASCADE
);

-- =========================
-- AUDIT LOGS
-- =========================

CREATE TABLE auditLogs (
    logID INT PRIMARY KEY AUTO_INCREMENT,
    adminID INT NOT NULL,
    action VARCHAR(255) NOT NULL,
    targetTable VARCHAR(100),
    targetID INT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (adminID) REFERENCES admins(adminID)
);

-- =========================
-- INITIAL ENUM-LIKE DATA
-- =========================

INSERT INTO userTypes (typeName) VALUES 
('Customer'), 
('Partner'), 
('Admin');

INSERT INTO userStatuses (statusName) VALUES 
('Pending'), 
('Verified'), 
('Non-verified');

INSERT INTO serviceAvailability (availabilityName) Values 
('Available'),
('Occupied'),
('Maintenance');
