CREATE DATABASE mamyr;
USE mamyr;




CREATE EVENT cleanup_users
ON SCHEDULE EVERY 1 MINUTE
DO
BEGIN
  -- Clear expired OTPs (older than 5 mins)
  UPDATE users
  SET userOTP = NULL, OTP_expiration_at = NULL
  WHERE OTP_expiration_at IS NOT NULL
    AND OTP_expiration_at < NOW() - INTERVAL 5 MINUTE;

  -- Mark accounts as Not-verified if 1 day old and still pending
  UPDATE users
  SET userStatusID = 3  -- Not-verified
  WHERE userStatusID = 1  -- Pending
    AND createdAt < NOW() - INTERVAL 1 DAY;

  -- Delete accounts if still pending after 30 days
  DELETE FROM users
  WHERE userStatusID = 1
    AND createdAt < NOW() - INTERVAL 30 DAY;
END;

CREATE TABLE userTypes (
    userTypeID INT PRIMARY KEY AUTO_INCREMENT,
    typeName VARCHAR(50) UNIQUE -- 'Customer', 'Partner', 'Admin'
);

INSERT INTO userTypes (typeName) VALUES 
('Customer'), 
('Partner'), 
('Admin');

CREATE TABLE userStatuses (
    userStatusID INT PRIMARY KEY AUTO_INCREMENT,
    statusName VARCHAR(50) UNIQUE --'Pending', 'Verified', 'Non-verified'
);

INSERT INTO userStatuses (statusName) VALUES 
('Pending'), 
('Verified'), 
('Not-verified');

CREATE TABLE serviceAvailability (
    availabilityID INT PRIMARY KEY AUTO_INCREMENT,
    availabilityName VARCHAR(50) UNIQUE -- 'Available', 'Occupied', 'Maintenance'
);

INSERT INTO serviceAvailability (availabilityName) Values 
('Available'),
('Occupied'),
('Maintenance');

Create Table Statuses (
    statusID INT PRIMARY KEY AUTO_INCREMENT,
    statusName VARCHAR(50) UNIQUE --'Pending', 'Approved', 'Rejected'
);

INSERT INTO Statuses (statusName) Values 
('Pending'),
('Approved'),
('Rejected');


Create Table serviceStatuses (
    serviceStatusID INT PRIMARY KEY AUTO_INCREMENT,
    serviceStatusName VARCHAR(50) UNIQUE --'Pending', 'Approved', 'Denied'
);

INSERT INTO serviceStatuses (serviceStatusName) Values 
('Pending'),
('Approved'),
('Denied');


CREATE TABLE eventCategories (
    categoryID INT PRIMARY KEY AUTO_INCREMENT,
    categoryName VARCHAR(200) NOT NULL
);

INSERT INTO `eventcategories` (`categoryID`, `categoryName`) VALUES 
(NULL, 'Birthday'), 
(NULL, 'Wedding'), 
(NULL, 'Team Building'), 
(NULL, 'Christening/Dedication'), 
(NULL, 'Thanksgiving Party'), 
(NULL, 'Christmas Party'), 
(NULL, 'Other');



CREATE TABLE users (
    userID INT PRIMARY KEY AUTO_INCREMENT,
    firstName VARCHAR(50) NOT NULL,
    middleInitial VARCHAR(50) DEFAULT NULL,
    lastName VARCHAR(50) NOT NULL,
    email VARCHAR(50) NOT NULL UNIQUE,
    userAddress TEXT NOT NULL,
    phoneNumber VARCHAR(20) DEFAULT NULL,
    birthDate DATE DEFAULT NULL,
    userProfile LONGBLOB,
    password VARCHAR(255) NOT NULL,
    userRole INT NOT NULL DEFAULT 1,
    userOTP VARCHAR(100),
    OTP_expiration_at DATETIME,
    userStatusID INT NOT NULL DEFAULT 1,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (userRole) REFERENCES userTypes(userTypeID),
    FOREIGN KEY (userStatusID) REFERENCES userStatuses(userStatusID)
);

CREATE TABLE admins (
    adminID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL UNIQUE,
    position VARCHAR(100),

    FOREIGN KEY (userID) REFERENCES users(userID)
);



CREATE TABLE partnerships (
    partnershipID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    companyName varchar(50) not null,
    businessEmail VARCHAR(255) NOT NULL UNIQUE,
    partnerAddress TEXT NOT NULL,
    documentLink VARCHAR(500) NOT NULL,
    partnerType VARCHAR(200) NOT NULL,
    status INT NOT NULL DEFAULT 1,
    requestDate DATE NOT NULL,
    startDate DATE DEFAULT NULL,
    endDate DATE DEFAULT NULL,

    FOREIGN KEY (userID) REFERENCES users(userID),
    FOREIGN KEY (status) REFERENCES Statuses(statusID)
);

CREATE TABLE partnershipServices (
    partnershipServiceID INT PRIMARY KEY AUTO_INCREMENT,
    partnershipID INT NOT NULL,
    PBName VARCHAR(200) NOT NULL,
    PBPrice DECIMAL(10,2) NOT NULL,
    PBDescription TEXT,
    PBcapacity INT,
    status ENUM('Pending', 'Approved', 'Denied') NOT NULL DEFAULT 'Pending',

    FOREIGN KEY (partnershipID) REFERENCES partnerships(partnershipID)
);


CREATE TABLE resortServices (
    resortServiceID INT PRIMARY KEY AUTO_INCREMENT,
    facilityName VARCHAR(200) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    capacity INT DEFAULT 0,
    duration VARCHAR(50) DEFAULT '0',
    category ENUM('Room','Cottage','Entertainment', 'Events', 'Entrance') NOT NULL,
    description TEXT NULL,
    imageData LONGBLOB
);

CREATE TABLE entranceRates (
    resortEntranceID INT PRIMARY KEY AUTO_INCREMENT,
    session_type VARCHAR(20),   
    time_range VARCHAR(50),    
    category VARCHAR(10),       
    price DECIMAL(10,2)       
);

-- =========================
-- SERVICES (joins resort services with partner businesses)
-- =========================

CREATE TABLE services (
  serviceID int(11) NOT NULL,
  resortServiceID int(11) DEFAULT NULL,
  partnershipServiceID int(11) DEFAULT NULL,
  availabilityID int(11) DEFAULT 1,
  resortEntranceID int(11) DEFAULT NULL,
    FOREIGN KEY (resortServiceID) REFERENCES resortServices(resortServiceID),
    FOREIGN KEY (partnershipServiceID) REFERENCES partnershipServices(partnershipServiceID),
    FOREIGN KEY (availabilityID) REFERENCES serviceAvailability(availabilityID),
    FOREIGN KEY (resortEntranceID) REFERENCES entranceRates(resortEntranceID)
);

-- =========================
-- PACKAGES
-- =========================

CREATE TABLE packages (
    packageID INT PRIMARY KEY AUTO_INCREMENT,
    packageName VARCHAR(100) NOT NULL,
    packageDescription TEXT NOT NULL,
    duration DECIMAL(10,2), 
    capacity INT(100) NOT NULL,
    resortserviceID INT NOT NULL,
    price DECIMAL(10,2) DEFAULT 0.00,
    categoryID INT NOT NULL,

    FOREIGN KEY (categoryID) REFERENCES eventCategories(categoryID)
);



CREATE TABLE customPackages (
    customPackageID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    totalPrice DECIMAL(10,2) DEFAULT 0.00,
    creationDate DATE NOT NULL,

    FOREIGN KEY (userID) REFERENCES users(userID)
);

CREATE TABLE packagesServices (
    packageServiceID INT PRIMARY KEY AUTO_INCREMENT,
    customPackageID INT,
    serviceID INT NOT NULL,

    FOREIGN KEY (customPackageID) REFERENCES customPackages(customPackageID),
    FOREIGN KEY (serviceID) REFERENCES services(serviceID)
);

-- =========================
-- BOOKINGS
-- =========================

CREATE TABLE bookings (
    bookingID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    packageID INT,
    serviceID INT,
    customPackageID INT,
    additionalRequest VARCHAR(255),
    startDate DATE NOT NULL,
    endDate DATE NOT NULL,
    totalCost DECIMAL(10,2) NOT NULL,
    status ENUM('Pending', 'Approved', 'Cancelled') NOT NULL DEFAULT 'Pending',
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (userID) REFERENCES users(userID),
    FOREIGN KEY (packageID) REFERENCES packages(packageID),
    FOREIGN KEY (serviceID) REFERENCES services(serviceID),
    FOREIGN KEY (customPackageID) REFERENCES customPackages(customPackageID)
);

CREATE TABLE confirmedBookings (
    confirmedBookingID INT PRIMARY KEY AUTO_INCREMENT,
    bookingID INT NOT NULL,
    totalCost DECIMAL(10,2) NOT NULL,
    status ENUM('Pending', 'Approved', 'Rejected') NOT NULL DEFAULT 'Pending',

    FOREIGN KEY (bookingID) REFERENCES bookings(bookingID)
);

-- =========================
-- WEBSITE CONTENT
-- =========================

CREATE TABLE websiteContents (
    contentID INT PRIMARY KEY AUTO_INCREMENT,
    adminID INT NOT NULL,
    sectionName VARCHAR(100) NOT NULL,
    title VARCHAR(255),
    content TEXT NOT NULL,
    lastUpdated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (adminID) REFERENCES admins(adminID)
);

-- âœ… Website Content Images (Weak Entity)
CREATE TABLE websiteContentImages (
    imageID INT PRIMARY KEY AUTO_INCREMENT,
    contentID INT NOT NULL,
    imageData LONGBLOB NOT NULL,
    altText VARCHAR(255),
    imageOrder INT DEFAULT 1,
    uploadedAt DATETIME DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (contentID) REFERENCES websiteContents(contentID)
        ON DELETE CASCADE
);

-- =========================
-- AUDIT LOGS
-- =========================

CREATE TABLE auditLogs (
    logID INT PRIMARY KEY AUTO_INCREMENT,
    adminID INT NOT NULL,
    action VARCHAR(255) NOT NULL,
    targetTable VARCHAR(100),
    targetID INT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (adminID) REFERENCES admins(adminID)
);



ALTER TABLE packages
ADD COLUMN availabilityID INT NOT NULL DEFAULT 1,
ADD CONSTRAINT fk_packages_availability
FOREIGN KEY (availabilityID) REFERENCES serviceavailability(availabilityID);
