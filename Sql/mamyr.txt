-- Create the database
CREATE DATABASE mamyr;
USE mamyr;

-- =========================
-- USER-RELATED TABLES
-- =========================

-- User types for normalization (replaces ENUM)
CREATE TABLE user_types (
    userTypeID INT PRIMARY KEY AUTO_INCREMENT,
    typeName VARCHAR(50) UNIQUE -- 'Customer', 'Partner', 'Admin'
);

-- User status types (replaces ENUM)
CREATE TABLE user_statuses (
    userStatusID INT PRIMARY KEY AUTO_INCREMENT,
    statusName VARCHAR(50) UNIQUE -- 'Pending', 'Verified', 'Non-verified'
);

-- Main users table
CREATE TABLE users (
    userID INT PRIMARY KEY AUTO_INCREMENT,
    firstName VARCHAR(50) NOT NULL,
    middleInitial VARCHAR(50),
    lastName VARCHAR(50) NOT NULL,
    email VARCHAR(50) NOT NULL UNIQUE,
    userAddress TEXT NOT NULL,
    phoneNumber VARCHAR(20),
    birthDate DATE,
    password VARCHAR(255) NOT NULL,
    userProfile LONGBLOB,
    userTypeID INT NOT NULL DEFAULT 1, -- Default to 'Customer'
    userOTP VARCHAR(100),
    OTP_expiration_at DATETIME,
    userStatusID INT NOT NULL DEFAULT 1, -- Default to 'Pending'

    FOREIGN KEY (userTypeID) REFERENCES user_types(userTypeID),
    FOREIGN KEY (userStatusID) REFERENCES user_statuses(userStatusID)
);

-- Admins table with FK to users (1-to-1)
CREATE TABLE admins (
    adminID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL UNIQUE,
    position VARCHAR(100), -- e.g. 'Manager', 'Support Staff'

    FOREIGN KEY (userID) REFERENCES users(userID)
);

-- =========================
-- PARTNERSHIP TABLES
-- =========================

CREATE TABLE partnerships (
    partnershipID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    partnerAddress TEXT NOT NULL,
    partnerType VARCHAR(200) NOT NULL,
    status ENUM('Pending', 'Approved', 'Rejected') NOT NULL DEFAULT 'Pending',
    startDate DATE NOT NULL,
    endDate DATE,

    FOREIGN KEY (userID) REFERENCES users(userID)
);

CREATE TABLE partnershipBusiness (
    partnershipBusinessID INT PRIMARY KEY AUTO_INCREMENT,
    partnershipID INT NOT NULL,
    PBName VARCHAR(200) NOT NULL,
    PBPrice DECIMAL(10,2) NOT NULL,
    PBDescription TEXT,
    PBcapacity INT,
    status ENUM('Pending', 'Approved', 'Denied') NOT NULL DEFAULT 'Pending',

    FOREIGN KEY (partnershipID) REFERENCES partnerships(partnershipID)
);

-- =========================
-- FACILITIES AND SERVICES
-- =========================

CREATE TABLE resortFacilities (
    resortFacilityID INT PRIMARY KEY AUTO_INCREMENT,
    facilityName VARCHAR(200) NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    capacity INT NOT NULL,
    description TEXT
);

CREATE TABLE services (
    serviceID INT PRIMARY KEY AUTO_INCREMENT,
    resortFacilityID INT NOT NULL,
    partnershipBusinessID INT NOT NULL,

    FOREIGN KEY (resortFacilityID) REFERENCES resortFacilities(resortFacilityID),
    FOREIGN KEY (partnershipBusinessID) REFERENCES partnershipBusiness(partnershipBusinessID)
);

-- =========================
-- PACKAGES
-- =========================

CREATE TABLE packages (
    packageID INT PRIMARY KEY AUTO_INCREMENT,
    packageName VARCHAR(100) NOT NULL,
    price DECIMAL(10,2) DEFAULT 0.00
);

CREATE TABLE customPackages (
    customPackageID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    totalPrice DECIMAL(10,2) DEFAULT 0.00,
    creationDate DATE NOT NULL,

    FOREIGN KEY (userID) REFERENCES users(userID)
);

-- Table to associate services with packages and custom packages
CREATE TABLE packages_services (
    packageServiceID INT PRIMARY KEY AUTO_INCREMENT,
    customPackageID INT,
    packageID INT,
    serviceID INT NOT NULL,

    FOREIGN KEY (customPackageID) REFERENCES customPackages(customPackageID),
    FOREIGN KEY (packageID) REFERENCES packages(packageID),
    FOREIGN KEY (serviceID) REFERENCES services(serviceID)
);

-- =========================
-- BOOKINGS
-- =========================

CREATE TABLE bookings (
    bookingID INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    packageID INT,
    customPackageID INT,
    additionalRequest VARCHAR(255),
    bookingDate DATE NOT NULL,
    totalCost DECIMAL(10,2) NOT NULL,
    status ENUM('Pending', 'Approved', 'Cancelled') NOT NULL DEFAULT 'Pending',

    FOREIGN KEY (userID) REFERENCES users(userID),
    FOREIGN KEY (packageID) REFERENCES packages(packageID),
    FOREIGN KEY (customPackageID) REFERENCES customPackages(customPackageID)
);

CREATE TABLE confirmed_bookings (
    confirmed_bookingID INT PRIMARY KEY AUTO_INCREMENT,
    bookingID INT NOT NULL,
    totalCost DECIMAL(10,2) NOT NULL,
    status ENUM('Pending', 'Approved', 'Rejected') NOT NULL DEFAULT 'Pending',

    FOREIGN KEY (bookingID) REFERENCES bookings(bookingID)
);

-- =========================
-- WEBSITE CONTENT
-- =========================

CREATE TABLE website_contents (
    contentID INT PRIMARY KEY AUTO_INCREMENT,
    adminID INT NOT NULL,
    section VARCHAR(100) NOT NULL, -- e.g. 'Home', 'About Us', 'Contact'
    title VARCHAR(255),
    content TEXT NOT NULL,
    image LONGBLOB,
    lastUpdated DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (adminID) REFERENCES admins(adminID)
);

-- =========================
-- AUDIT LOGS (for tracking admin actions)
-- =========================

CREATE TABLE audit_logs (
    logID INT PRIMARY KEY AUTO_INCREMENT,
    adminID INT NOT NULL,
    action VARCHAR(255) NOT NULL, -- e.g. 'Updated Website', 'Approved Booking'
    targetTable VARCHAR(100), -- Optional: which table was affected
    targetID INT,             -- Optional: ID of the affected record
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (adminID) REFERENCES admins(adminID)
);

-- =========================
-- SEED INITIAL ENUM VALUES
-- =========================

-- Populate default user types
INSERT INTO user_types (typeName) VALUES 
('Customer'), 
('Partner'), 
('Admin');

-- Populate default user statuses
INSERT INTO user_statuses (statusName) VALUES 
('Pending'), 
('Verified'), 
('Non-verified');
